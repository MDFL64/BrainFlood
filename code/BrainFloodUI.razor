@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root>
	<div class="main">
		<div class="half-panel">
			<h2>Source</h2>
			<div class="scroll-panel">
				<TextEntry class="source" Multiline=@(true) Text=@Source OnTextEdited=@HandleEdit />
			</div>
		</div>
		<div class="half-panel">
			<h2>Output</h2>
			<div class="scroll-panel output">@(Output?.Text)</div>
		</div>
	</div>
	<div class="bottom">
		<Button onclick=@Run>Run</Button>
		<Button class="select" onclick=@(()=>{SelectedExecutor=Executor.Interpreter; Run();})>@RenderBubble(SelectedExecutor == Executor.Interpreter) Interpreter</Button>
		<Button class="select" onclick=@(()=>{SelectedExecutor=Executor.Compiler; Run();})>@RenderBubble(SelectedExecutor == Executor.Compiler) Compiler</Button>
		@if (SHOW_LINQ) {
			<Button class="select" onclick=@(()=>{SelectedExecutor=Executor.LinqExpression; Run();})>@RenderBubble(SelectedExecutor == Executor.LinqExpression) LINQ Expression</Button>
		}
	</div>
	<div class="info">@(Output?.Info)</div>
</root>

@code
{
	GameObject Runner;

	public string Source { get; set; } = FileSystem.Mounted.ReadAllText("mandelbrot.txt");
	public Output Output = null;
	public Executor SelectedExecutor = Executor.Interpreter;

	#if DISABLE_WHITELIST
	const bool SHOW_LINQ = true;
	#else
	const bool SHOW_LINQ = false;
	#endif

	private string RenderBubble(bool b) {
		return b ? "◉" : "◎";
	}

	public void HandleEdit(string text) {
		Source = text;
		Run();
	}

	public void Run() {
		if (Runner != null && Runner.IsValid) {
			Runner.Destroy();
		}

		Output = new Output();

		var go = new GameObject();
		go.Name = "Runner";
		go.Parent = GameObject;

		var bf = go.AddComponent<BrainFlood>();
		bf.Source = Source;
		bf.Output = Output;
		bf.SelectedExecutor = SelectedExecutor;

		Runner = go;
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( SelectedExecutor, Output?.Text, Output?.Info );
}
